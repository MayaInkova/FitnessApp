package com.fitnessapp.service;

import com.fitnessapp.model.ChatSessionData;
import com.fitnessapp.model.User;
import com.fitnessapp.model.NutritionPlan;
import com.fitnessapp.model.Recipe;
import com.fitnessapp.repository.ChatSessionDataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class ChatbotService {

    @Autowired
    private ChatSessionDataRepository sessionDataRepository;

    @Autowired
    private NutritionPlanService nutritionPlanService;

    public String processMessage(String sessionId, String message) {
        if (message.equalsIgnoreCase("—Ä–µ—Å—Ç–∞—Ä—Ç")) {
            resetSession(sessionId);
            ChatSessionData newSession = new ChatSessionData();
            newSession.setSessionId(sessionId);
            newSession.setState("ASK_WEIGHT");
            sessionDataRepository.save(newSession);
            return "üîÑ –î–æ–±—Ä–µ, –∑–∞–ø–æ—á–≤–∞–º–µ –æ—Ç–Ω–∞—á–∞–ª–æ. –ö–æ–ª–∫–æ —Ç–µ–∂–∏—à –≤ –∫–∏–ª–æ–≥—Ä–∞–º–∏?";
        }

        ChatSessionData session = sessionDataRepository
                .findBySessionId(sessionId)
                .orElseGet(() -> {
                    ChatSessionData newSession = new ChatSessionData();
                    newSession.setSessionId(sessionId);
                    newSession.setState("ASK_WEIGHT");
                    return sessionDataRepository.save(newSession);
                });

        String response;

        switch (session.getState()) {
            case "ASK_WEIGHT":
                try {
                    double weight = Double.parseDouble(message);
                    session.setWeight(weight);
                    session.setState("ASK_HEIGHT");
                    response = "–ö–æ–ª–∫–æ –µ —Ç–≤–æ—è—Ç —Ä—ä—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∏?";
                } catch (NumberFormatException e) {
                    response = "‚ùó –ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ç–µ–≥–ª–æ—Ç–æ —Å–∏ –∫–∞—Ç–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 70";
                }
                break;

            case "ASK_HEIGHT":
                try {
                    double height = Double.parseDouble(message);
                    session.setHeight(height);
                    session.setState("ASK_GENDER");
                    response = "–ö–∞–∫—ä–≤ –µ —Ç–≤–æ—è—Ç –ø–æ–ª? (–º—ä–∂ / –∂–µ–Ω–∞)";
                } catch (NumberFormatException e) {
                    response = "‚ùó –ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ä—ä—Å—Ç–∞ —Å–∏ –∫–∞—Ç–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 175";
                }
                break;

            case "ASK_GENDER":
                String gender = message.trim().toLowerCase();
                if (gender.equals("–º—ä–∂") || gender.equals("–∂–µ–Ω–∞")) {
                    session.setGender(gender);
                    session.setState("ASK_GOAL");
                    response = "–ö–∞–∫–≤–∞ –µ —Ç–≤–æ—è—Ç–∞ —Ü–µ–ª? (weight_loss / muscle_gain / maintain)";
                } else {
                    response = "‚ùó –ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –ø–æ–ª: '–º—ä–∂' –∏–ª–∏ '–∂–µ–Ω–∞'.";
                }
                break;

            case "ASK_GOAL":
                String goal = message.trim().toLowerCase();
                if (goal.equals("weight_loss") || goal.equals("muscle_gain") || goal.equals("maintain")) {
                    session.setGoal(goal);
                    session.setState("DONE");

                    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–π –≤—Ä–µ–º–µ–Ω–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
                    User tempUser = new User();
                    tempUser.setWeight(session.getWeight());
                    tempUser.setHeight(session.getHeight());
                    tempUser.setGender(session.getGender());
                    tempUser.setGoal(session.getGoal());
                    tempUser.setActivityLevel("moderate");

                    NutritionPlan plan = nutritionPlanService.generatePlanForUser(tempUser);

                    StringBuilder sb = new StringBuilder();
                    sb.append(String.format("‚úÖ –ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–µ–Ω –¥–Ω–µ–≤–µ–Ω –ø—Ä–∏–µ–º: %.0f –∫–∫–∞–ª.\n", plan.getCalories()));
                    sb.append("üçΩ –ü—Ä–∏–º–µ—Ä–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∏:\n");
                    for (Recipe recipe : plan.getRecipes()) {
                        sb.append("- ").append(recipe.getName()).append("\n");
                    }
                    response = sb.toString();
                } else {
                    response = "‚ùó –ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ü–µ–ª—Ç–∞ —Å–∏: weight_loss / muscle_gain / maintain";
                }
                break;

            case "DONE":
                response = "‚úÖ –í–µ—á–µ —Ç–∏ –∏–∑—á–∏—Å–ª–∏—Ö —Ä–µ–∂–∏–º! –ê–∫–æ –∏—Å–∫–∞—à –Ω–æ–≤, –Ω–∞–ø–∏—à–∏: —Ä–µ—Å—Ç–∞—Ä—Ç";
                break;

            default:
                response = "‚ùì –ù–µ—â–æ —Å–µ –æ–±—ä—Ä–∫–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.";
        }

        sessionDataRepository.save(session);
        return response;
    }

    public void resetSession(String sessionId) {
        Optional<ChatSessionData> session = sessionDataRepository.findBySessionId(sessionId);
        session.ifPresent(sessionDataRepository::delete);
    }
}
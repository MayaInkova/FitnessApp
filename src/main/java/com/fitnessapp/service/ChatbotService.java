package com.fitnessapp.service;

import com.fitnessapp.model.*;
import com.fitnessapp.repository.MealRepository;
import com.fitnessapp.repository.UserRepository;
import com.fitnessapp.repository.DietTypeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class ChatbotService {

    private final NutritionPlanService nutritionPlanService;
    private final UserRepository userRepository;
    private final MealRepository mealRepository;
    private final DietTypeRepository dietTypeRepository;

    private final Map<String, SessionState> sessionMap = new HashMap<>();

    @Autowired
    public ChatbotService(NutritionPlanService nutritionPlanService,
                          UserRepository userRepository,
                          MealRepository mealRepository,
                          DietTypeRepository dietTypeRepository) {
        this.nutritionPlanService = nutritionPlanService;
        this.userRepository = userRepository;
        this.mealRepository = mealRepository;
        this.dietTypeRepository = dietTypeRepository;
    }

    public String processMessage(String sessionId, String message) {
        SessionState session = sessionMap.computeIfAbsent(sessionId, k -> new SessionState());

        if (message.equalsIgnoreCase("—Ä–µ—Å—Ç–∞—Ä—Ç")) {
            resetSession(sessionId);
            return "–°–µ—Å–∏—è—Ç–∞ –µ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–∞. –ò—Å–∫–∞—à –ª–∏ –º–∞–ª–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–∏–µ—Ç–∏—Ç–µ –ø—Ä–µ–¥–∏ –¥–∞ –∏–∑–±–µ—Ä–µ—à? (–¥–∞ / –Ω–µ)";
        }

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
        if ("ASK_DIET_EXPLANATION".equals(session.state)) {
            if (message.trim().equalsIgnoreCase("–¥–∞")) {
                session.state = "ASK_DIET_TYPE";
                return """
                –ï—Ç–æ –∫—Ä–∞—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
                üü¢ Balanced ‚Äì —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞ —Ö—Ä–∞–Ω–∞, —É–º–µ—Ä–µ–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
                ü•© High Protein ‚Äì –∑–∞ –º—É—Å–∫—É–ª–Ω–∞ –º–∞—Å–∞, –ø–æ–≤–µ—á–µ –º–µ—Å–æ –∏ –ø—Ä–æ—Ç–µ–∏–Ω.
                ü•ë Keto ‚Äì –≤–∏—Å–æ–∫–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –º–∞–∑–Ω–∏–Ω–∏, –Ω–∏—Å–∫–æ –Ω–∞ –≤—ä–≥–ª–µ—Ö–∏–¥—Ä–∞—Ç–∏.

                –°–µ–≥–∞ –∏–∑–±–µ—Ä–∏ —Ç–∏–ø –¥–∏–µ—Ç–∞: balanced / high_protein / keto
            """;
            } else if (message.trim().equalsIgnoreCase("–Ω–µ")) {
                session.state = "ASK_DIET_TYPE";
                return "–î–æ–±—Ä–µ. –ú–æ–ª—è, –∏–∑–±–µ—Ä–∏ –≤–∏–¥ –¥–∏–µ—Ç–∞: balanced / high_protein / keto";
            } else {
                return "–ò—Å–∫–∞—à –ª–∏ –∫—Ä–∞—Ç–∫–æ –æ–±—è—Å–Ω–µ–Ω–∏–µ –∑–∞ –≤–∏–¥–æ–≤–µ—Ç–µ –¥–∏–µ—Ç–∏? –û—Ç–≥–æ–≤–æ—Ä–∏ —Å '–¥–∞' –∏–ª–∏ '–Ω–µ'.";
            }
        }

        if ("ASK_DIET_TYPE".equals(session.state)) {
            if (message.equalsIgnoreCase("keto") || message.equalsIgnoreCase("balanced") || message.equalsIgnoreCase("high_protein")) {
                session.dietType = message.toLowerCase();
                session.state = "ASK_WEIGHT";
                return "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞—Ö —Ç–∏–ø –¥–∏–µ—Ç–∞: " + session.dietType + ". –ö–æ–ª–∫–æ —Ç–µ–∂–∏—à –≤ –º–æ–º–µ–Ω—Ç–∞?";
            }
            return "–ú–æ–ª—è, –∏–∑–±–µ—Ä–∏ —Ç–∏–ø –¥–∏–µ—Ç–∞: balanced / high_protein / keto";
        }

        return switch (session.state) {
            case "ASK_WEIGHT" -> handleWeightInput(session, message);
            case "ASK_HEIGHT" -> handleHeightInput(session, message);
            case "ASK_AGE" -> handleAgeInput(session, message);
            case "ASK_GENDER" -> handleGenderInput(session, message);
            case "ASK_GOAL" -> handleGoalInput(session, message);
            case "ASK_MEAT" -> handleMeatPreference(session, message);
            case "ASK_DAIRY" -> handleDairy(session, message);
            case "ASK_TRAINING" -> handleTraining(session, message);
            case "ASK_ALLERGIES" -> handleAllergies(session, message);
            case "DONE" -> "–í–µ—á–µ —Ç–∏ –∏–∑—á–∏—Å–ª–∏—Ö —Ä–µ–∂–∏–º! –ê–∫–æ –∏—Å–∫–∞—à –Ω–æ–≤, –Ω–∞–ø–∏—à–∏: —Ä–µ—Å—Ç–∞—Ä—Ç";
            default -> "–ù–µ—â–æ —Å–µ –æ–±—ä—Ä–∫–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.";
        };
    }

    public boolean isReadyToGeneratePlan(String sessionId) {
        SessionState session = sessionMap.get(sessionId);
        return session != null &&
                "DONE".equals(session.state) &&
                session.goal != null &&
                session.gender != null;
    }

    public NutritionPlan generatePlan(String sessionId) {
        SessionState session = sessionMap.get(sessionId);
        if (session == null) throw new IllegalStateException("–õ–∏–ø—Å–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å–∏—è.");

        String dietTypeName = session.dietType != null ? session.dietType : "balanced";
        DietType dietTypeEntity = dietTypeRepository.findByNameIgnoreCase(dietTypeName)
                .orElseGet(() -> dietTypeRepository.findByNameIgnoreCase("balanced").orElse(null));

        User user = createOrUpdateUser(session, sessionId);
        user.setDietType(dietTypeEntity);
        userRepository.save(user);

        NutritionPlan plan = nutritionPlanService.generatePlanForUser(user, dietTypeName);

        for (Meal meal : plan.getMeals()) {
            meal.setTime(getDefaultMealTime(meal.getType()));
            mealRepository.save(meal);
        }

        List<Meal> meals = mealRepository.findByNutritionPlanId(plan.getId());
        plan.setMeals(meals);

        return plan;
    }

    private User createOrUpdateUser(SessionState session, String sessionId) {
        if (session.isGuest) {
            String tempEmail = "guest_" + sessionId + "@guest.com";
            DietType dietType = dietTypeRepository.findByNameIgnoreCase(
                            session.dietType != null ? session.dietType : "balanced")
                    .orElseThrow(() -> new RuntimeException("–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–∏–ø –¥–∏–µ—Ç–∞: " + session.dietType));

            User demoUser = User.builder()
                    .age(session.age > 0 ? session.age : 25)
                    .height(session.height > 0 ? session.height : 175)
                    .weight(session.weight > 0 ? session.weight : 70)
                    .gender(session.gender != null ? session.gender : "–º—ä–∂")
                    .goal(session.goal != null ? session.goal : "maintain")
                    .activityLevel("moderate")
                    .email(tempEmail)
                    .fullName("–ì–æ—Å—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª")
                    .password("guest")
                    .meatPreference(session.meatPreference)
                    .consumesDairy(session.consumesDairy != null ? session.consumesDairy : true)
                    .allergies(session.allergies)
                    .trainingType(session.trainingType)
                    .dietType(dietType)
                    .build();

            return userRepository.save(demoUser);
        }

        User user = userRepository.findById(session.userId).orElseThrow();
        updateUserWithSessionData(user, session);

        DietType dietType = dietTypeRepository.findByNameIgnoreCase(
                        session.dietType != null ? session.dietType : "balanced")
                .orElse(null);
        user.setDietType(dietType);

        return userRepository.save(user);
    }

    private void updateUserWithSessionData(User user, SessionState session) {
        if (session.weight > 0) user.setWeight(session.weight);
        if (session.height > 0) user.setHeight(session.height);
        if (session.age > 0) user.setAge(session.age);
        if (session.gender != null) user.setGender(session.gender);
        if (session.goal != null) user.setGoal(session.goal);
        if (session.meatPreference != null) user.setMeatPreference(session.meatPreference);
        if (session.consumesDairy != null) user.setConsumesDairy(session.consumesDairy);
        if (session.allergies != null) user.setAllergies(session.allergies);
        if (session.trainingType != null) user.setTrainingType(session.trainingType);
        user.setActivityLevel("moderate");
    }

    private String getDefaultMealTime(String type) {
        if (type == null) return "08:00";
        return switch (type.toLowerCase()) {
            case "–∑–∞–∫—É—Å–∫–∞", "breakfast" -> "08:00";
            case "–æ–±—è–¥", "lunch" -> "13:00";
            case "–≤–µ—á–µ—Ä—è", "dinner" -> "19:00";
            default -> "10:30";
        };
    }

    public void resetSession(String sessionId) {
        sessionMap.put(sessionId, new SessionState());
    }

    public void attachUserToSession(String sessionId, Integer userId) {
        SessionState session = getOrCreateSession(sessionId);
        session.userId = userId;
    }

    public SessionState getOrCreateSession(String sessionId) {
        return sessionMap.computeIfAbsent(sessionId, k -> new SessionState());
    }

    public static class SessionState {
        public double weight;
        public double height;
        public int age;
        public String gender;
        public String goal;
        public String state = "ASK_DIET_EXPLANATION";
        public Integer userId;
        public boolean planGenerated = false;
        public boolean isGuest = false;
        public String dietType;

        public String meatPreference;
        public Boolean consumesDairy;
        public String trainingType;
        public String allergies;
    }


    private String handleWeightInput(SessionState session, String message) {
        try {
            double weight = Double.parseDouble(message);
            if (weight < 30 || weight > 250) return "–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ —Ç–µ–≥–ª–æ –º–µ–∂–¥—É 30 –∏ 250 –∫–≥.";
            session.weight = weight;
            session.state = "ASK_HEIGHT";
            return "–ö–æ–ª–∫–æ –µ —Ç–≤–æ—è—Ç —Ä—ä—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∏?";
        } catch (NumberFormatException e) {
            return "–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ç–µ–≥–ª–æ—Ç–æ —Å–∏ –∫–∞—Ç–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 70";
        }
    }

    private String handleHeightInput(SessionState session, String message) {
        try {
            double height = Double.parseDouble(message);
            if (height < 100 || height > 250) return "–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ä—ä—Å—Ç –º–µ–∂–¥—É 100 –∏ 250 —Å–º.";
            session.height = height;
            session.state = "ASK_AGE";
            return "–ö–æ–ª–∫–æ –≥–æ–¥–∏–Ω–∏ —Å–∏?";
        } catch (NumberFormatException e) {
            return "–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ä—ä—Å—Ç–∞ —Å–∏ –∫–∞—Ç–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 175";
        }
    }

    private String handleAgeInput(SessionState session, String message) {
        try {
            int age = Integer.parseInt(message);
            if (age < 10 || age > 100) return "–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞ –≤—ä–∑—Ä–∞—Å—Ç –º–µ–∂–¥—É 10 –∏ 100 –≥–æ–¥–∏–Ω–∏.";
            session.age = age;
            session.state = "ASK_GENDER";
            return "–ö–∞–∫—ä–≤ –µ —Ç–≤–æ—è—Ç –ø–æ–ª? (–º—ä–∂ / –∂–µ–Ω–∞)";
        } catch (NumberFormatException e) {
            return "–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞ —Å–∏ –∫–∞—Ç–æ —Ü—è–ª–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 25";
        }
    }

    private String handleGenderInput(SessionState session, String message) {
        String gender = message.trim().toLowerCase();
        if (gender.equals("–º—ä–∂") || gender.equals("–∂–µ–Ω–∞")) {
            session.gender = gender;
            session.state = "ASK_GOAL";
            return "–ö–∞–∫–≤–∞ –µ —Ç–≤–æ—è—Ç–∞ —Ü–µ–ª? (–æ—Ç—Å–ª–∞–±–≤–∞–Ω–µ / –∫–∞—á–≤–∞–Ω–µ / –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–µ)";
        }
        return "–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –ø–æ–ª: '–º—ä–∂' –∏–ª–∏ '–∂–µ–Ω–∞'.";
    }

    private String handleGoalInput(SessionState session, String message) {
        String goal = message.trim().toLowerCase();
        return switch (goal) {
            case "–æ—Ç—Å–ª–∞–±–≤–∞–Ω–µ" -> {
                session.goal = "weight_loss";
                session.state = "ASK_MEAT";
                yield "–ö–∞–∫—ä–≤ —Ç–∏–ø –º–µ—Å–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—à? (–ø–∏–ª–µ / —Ç–µ–ª–µ—à–∫–æ / —Å–≤–∏–Ω—Å–∫–æ / —Ä–∏–±–∞ / –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü)";
            }
            case "–∫–∞—á–≤–∞–Ω–µ" -> {
                session.goal = "muscle_gain";
                session.state = "ASK_MEAT";
                yield "–ö–∞–∫—ä–≤ —Ç–∏–ø –º–µ—Å–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—à? (–ø–∏–ª–µ / —Ç–µ–ª–µ—à–∫–æ / —Å–≤–∏–Ω—Å–∫–æ / —Ä–∏–±–∞ / –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü)";
            }
            case "–ø–æ–¥–¥—ä—Ä–∂–∞–Ω–µ" -> {
                session.goal = "maintain";
                session.state = "ASK_MEAT";
                yield "–ö–∞–∫—ä–≤ —Ç–∏–ø –º–µ—Å–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—à? (–ø–∏–ª–µ / —Ç–µ–ª–µ—à–∫–æ / —Å–≤–∏–Ω—Å–∫–æ / —Ä–∏–±–∞ / –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü)";
            }
            default -> "–ú–æ–ª—è, –∏–∑–±–µ—Ä–∏ —Ü–µ–ª: –æ—Ç—Å–ª–∞–±–≤–∞–Ω–µ / –∫–∞—á–≤–∞–Ω–µ / –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–µ";
        };
    }

    private String handleMeatPreference(SessionState session, String message) {
        session.meatPreference = message.trim();
        session.state = "ASK_DAIRY";
        return "–ö–æ–Ω—Å—É–º–∏—Ä–∞—à –ª–∏ –º–ª–µ—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏? (–¥–∞ / –Ω–µ)";
    }

    private String handleDairy(SessionState session, String message) {
        session.consumesDairy = message.trim().equalsIgnoreCase("–¥–∞");
        session.state = "ASK_TRAINING";
        return "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—à –ª–∏ –ø–ª–∞–Ω —Å —Ç–µ–∂–µ—Å—Ç–∏ –∏–ª–∏ –±–µ–∑ —Ç–µ–∂–µ—Å—Ç–∏?";
    }

    private String handleTraining(SessionState session, String message) {
        session.trainingType = message.trim().toLowerCase();
        session.state = "ASK_ALLERGIES";
        return "–ê–∫–æ –∏–º–∞—à –∞–ª–µ—Ä–≥–∏–∏, –Ω–∞–ø–∏—à–∏ –∫–æ–∏ —Å–∞. –ê–∫–æ –Ω—è–º–∞—à, –Ω–∞–ø–∏—à–∏ '–Ω–µ'.";
    }

    private String handleAllergies(SessionState session, String message) {
        session.allergies = message.trim();
        session.state = "DONE";
        return "–ë–ª–∞–≥–æ–¥–∞—Ä—è! –ò–∑—á–∏—Å–ª—è–≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω —Ä–µ–∂–∏–º...";
    }
}
package com.fitnessapp.controller;

import com.fitnessapp.dto.UserUpdateRequest;
import com.fitnessapp.dto.UserResponseDTO;
import com.fitnessapp.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List; // –í–µ—Ä–æ—è—Ç–Ω–æ –≤–µ—á–µ –Ω–µ –µ –Ω—É–∂–Ω–æ, –∞–∫–æ –Ω—è–º–∞ getAllUsers
import java.util.NoSuchElementException;
import java.util.Optional;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*")
public class UserController {

    private static final Logger logger = LoggerFactory.getLogger(UserController.class);

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    // üí• –ü–†–ï–ú–ê–•–ù–ê–¢–û: –ú–µ—Ç–æ–¥—ä—Ç getAllUsers() –µ –ø—Ä–µ–º–µ—Å—Ç–µ–Ω –≤ AdminController.java
    // –ê–∫–æ –≤—Å–µ –ø–∞–∫ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–º–∞—Ç–µ getAllUsers —Ç—É–∫ (–∫–æ–µ—Ç–æ –Ω–µ –µ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ –∑–∞ –æ–±–∏–∫–Ω–æ–≤–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏),
    // —Ç–æ–≥–∞–≤–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–∑–≤–∏–∫–∞—Ç–µ userService.getAllUsersForAdmin(null);
    //
    // @GetMapping("/all")
    // @PreAuthorize("hasRole('ADMIN')")
    // public ResponseEntity<List<UserResponseDTO>> getAllUsers() {
    //     logger.info("–ü–æ–ª—É—á–µ–Ω–∞ GET –∑–∞—è–≤–∫–∞ –∑–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏.");
    //     List<UserResponseDTO> users = userService.getAllUsersForAdmin(null); // –ü–æ–¥–∞–≤–∞–º–µ null –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ
    //     return ResponseEntity.ok(users);
    // }

    @GetMapping("/{id}")
    @PreAuthorize("isAuthenticated() and (#id == authentication.principal.id or hasRole('ADMIN'))")
    public ResponseEntity<UserResponseDTO> getUserById(@PathVariable Integer id) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ GET –∑–∞—è–≤–∫–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID: {}", id);
        Optional<UserResponseDTO> userDTO = userService.getUserByIdDTO(id);
        if (userDTO.isEmpty()) {
            logger.warn("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {} –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.", id);
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(userDTO.get());
    }


    @PutMapping("/{id}")
    @PreAuthorize("isAuthenticated() and (#id == authentication.principal.id or hasRole('ADMIN'))")
    public ResponseEntity<UserResponseDTO> updateUser(@PathVariable Integer id, @RequestBody UserUpdateRequest updateRequest) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ PUT –∑–∞—è–≤–∫–∞ –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID: {}", id);
        try {
            UserResponseDTO updatedUser = userService.updateUserProfile(id, updateRequest);
            return ResponseEntity.ok(updatedUser);
        } catch (RuntimeException e) { // –•–≤–∞—â–∞ RuntimeException, –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ NoSuchElementException –∏ IllegalArgumentException –æ—Ç UserService
            logger.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {}: {}", id, e.getMessage());
            // –í—Ä—ä—â–∞–º–µ 404 –∞–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω, –∏–ª–∏ 400 –∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏ (–Ω–∞–ø—Ä. –∑–∞–µ—Ç –∏–º–µ–π–ª)
            HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;
            if (e instanceof NoSuchElementException) {
                status = HttpStatus.NOT_FOUND;
            } else if (e instanceof IllegalArgumentException) {
                status = HttpStatus.BAD_REQUEST;
            }
            return ResponseEntity.status(status).body(null); // –ú–æ–∂–µ—Ç–µ –¥–∞ –≤—ä—Ä–Ω–µ—Ç–µ –∏ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ: .body(e.getMessage())
        } catch (Exception e) {
            logger.error("–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
}
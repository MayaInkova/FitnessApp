package com.fitnessapp.controller;

import com.fitnessapp.dto.UserResponseDTO;
import com.fitnessapp.dto.UserUpdateRequest; // üåü –ù–û–í –ò–ú–ü–û–†–¢: –ó–∞ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ UserUpdateRequest
import com.fitnessapp.service.UserService;
import org.slf4j.Logger; // üåü –ù–û–í –ò–ú–ü–û–†–¢: –ó–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ
import org.slf4j.LoggerFactory; // üåü –ù–û–í –ò–ú–ü–û–†–¢: –ó–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ
import org.springframework.beans.factory.annotation.Autowired; // üåü –ù–û–í –ò–ú–ü–û–†–¢: –ó–∞ @Autowired
import org.springframework.http.HttpStatus; // üåü –ù–û–í –ò–ú–ü–û–†–¢: –ó–∞ HttpStatus
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.NoSuchElementException; // üåü –ù–û–í –ò–ú–ü–û–†–¢: –ó–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–∫–ª—é—á–µ–Ω–∏—è

@RestController
@RequestMapping("/api/admin") // –ë–∞–∑–æ–≤ –ø—ä—Ç –∑–∞ –≤—Å–∏—á–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏ –µ–Ω–¥–ø–æ–π–Ω—Ç–∏
@CrossOrigin(origins = "*") // –ü–æ–∑–≤–æ–ª—è–≤–∞ CORS
// @PreAuthorize("hasRole('ADMIN')") // –ú–æ–∂–µ—Ç–µ –¥–∞ –≥–æ —Å–ª–æ–∂–∏—Ç–µ —Ç—É–∫, –∑–∞ –¥–∞ –≤–∞–∂–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –º–µ—Ç–æ–¥–∏, –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–æ –∑–∞ –≤—Å–µ–∫–∏ –º–µ—Ç–æ–¥
public class AdminController {

    private static final Logger logger = LoggerFactory.getLogger(AdminController.class); // üåü –î–û–ë–ê–í–ï–ù–û: –ó–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ

    private final UserService userService;

    @Autowired // üåü –î–û–ë–ê–í–ï–ù–û: –ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ –µ –∑–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–Ω–æ –∏–Ω–∂–µ–∫—Ç–∏—Ä–∞–Ω–µ
    public AdminController(UserService userService) {
        this.userService = userService;
    }

    // –ï–Ω–¥–ø–æ–π–Ω—Ç –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–∫–æ –≤–µ—á–µ –Ω–µ –µ –≤ AdminController)
    @GetMapping("/stats")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> getAdminStats() { // –ü—Ä–æ–º–µ–Ω–µ–Ω–æ –∏–º–µ –∑–∞ —è—Å–Ω–æ—Ç–∞
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ GET –∑–∞—è–≤–∫–∞ –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.");
        // –ú–æ–∂–µ—Ç–µ –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ —Ç–æ–≤–∞ –¥–∏–Ω–∞–º–∏—á–Ω–æ, –∫–∞—Ç–æ –∏–Ω–∂–µ–∫—Ç–∏—Ä–∞—Ç–µ UserRepository –∏ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ userRepository.count()
        String stats = "–û–±—â –±—Ä–æ–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏: (–∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞–π –±—Ä–æ—è—á); –û–±—â –±—Ä–æ–π —Ä–µ–∂–∏–º–∏: (–∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞–π –±—Ä–æ—è—á); –û–±—â –±—Ä–æ–π —Ä–µ—Ü–µ–ø—Ç–∏: (–∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞–π –±—Ä–æ—è—á).";
        return ResponseEntity.ok(stats);
    }

    // üåü –ú–û–î–ò–§–ò–¶–ò–†–ê–ù –ï–ù–î–ü–û–ô–ù–¢: –ó–∞ —Ç—ä—Ä—Å–µ–Ω–µ –∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ
    // –ú–æ–∂–µ –¥–∞ —Å–µ –∏–∑–≤–∏–∫–∞ —Å /api/admin/users –∏–ª–∏ /api/admin/users?searchTerm=test
    @GetMapping("/users")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<UserResponseDTO>> getAllUsers(@RequestParam(required = false) String searchTerm) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ GET –∑–∞—è–≤–∫–∞ –∑–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ (–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª). SearchTerm: {}", searchTerm);
        List<UserResponseDTO> users = userService.getAllUsersForAdmin(searchTerm); // –ò–∑–≤–∏–∫–≤–∞–º–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∏—è –º–µ—Ç–æ–¥
        return ResponseEntity.ok(users);
    }

    // –ï–Ω–¥–ø–æ–π–Ω—Ç –∑–∞ –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è
    @PostMapping("/assign-role")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> assignRoleToUser(@RequestParam Integer userId, @RequestParam String role) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è '{}' –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª ID: {}", role, userId);
        try {
            userService.assignRole(userId, role);
            return ResponseEntity.ok(String.format("–†–æ–ª—è '%s' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª ID %d.", role, userId));
        } catch (NoSuchElementException e) {
            logger.warn("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        } catch (IllegalArgumentException e) {
            logger.warn("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        } catch (Exception e) {
            logger.error("–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ—è–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è.");
        }
    }

    // üåü –ù–û–í –ï–ù–î–ü–û–ô–ù–¢: –ó–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞ —Ä–µ–¥–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (–≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –∏–º–µ–π–ª)
    @PutMapping("/users/{id}")
    @PreAuthorize("hasRole('ADMIN')") // –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ —Å–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–≥–∞—Ç –¥–∞ –≥–æ –∏–∑–ø–æ–ª–∑–≤–∞—Ç
    public ResponseEntity<UserResponseDTO> updateUserData(@PathVariable Integer id, @RequestBody UserUpdateRequest updateRequest) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ PUT –∑–∞—è–≤–∫–∞ –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –¥–∞–Ω–Ω–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞ ID: {}", id);
        try {
            UserResponseDTO updatedUser = userService.updateUserProfile(id, updateRequest);
            return ResponseEntity.ok(updatedUser);
        } catch (NoSuchElementException e) {
            logger.warn("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {} –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è: {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        } catch (IllegalArgumentException e) { // –ó–∞ –≥—Ä–µ—à–∫–∏ –∫–∞—Ç–æ –∑–∞–µ—Ç –∏–º–µ–π–ª
            logger.warn("–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {}: {}", id, e.getMessage());
            // –ú–æ–∂–µ –¥–∞ –≤—ä—Ä–Ω–µ—Ç–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –≥—Ä–µ—à–∫–∞ –≤ —Ç—è–ª–æ—Ç–æ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null); // –í—Ä—ä—â–∞ 400 Bad Request
        } catch (Exception e) {
            logger.error("–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // üåü –ï–ù–î–ü–û–ô–ù–¢ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (–ø—Ä–µ–º–µ—Å—Ç–µ–Ω —Ç—É–∫, –∞–∫–æ –Ω–µ –µ –±–∏–ª –≤ AdminController)
    @DeleteMapping("/users/{id}")
    @PreAuthorize("hasRole('ADMIN')") // –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ —Å–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–≥–∞—Ç –¥–∞ –≥–æ –∏–∑–ø–æ–ª–∑–≤–∞—Ç
    public ResponseEntity<String> deleteUser(@PathVariable Integer id) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ DELETE –∑–∞—è–≤–∫–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID: {}", id);
        try {
            userService.deleteUser(id);
            return new ResponseEntity<>("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID " + id + " –µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ.", HttpStatus.OK);
        } catch (NoSuchElementException e) { // –•–≤–∞—â–∞–º–µ NoSuchElementException, –∫–∞–∫—Ç–æ –µ –ø—Ä–æ–º–µ–Ω–µ–Ω–æ –≤ UserService
            logger.warn("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {}: {}", id, e.getMessage());
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND); // –í—Ä—ä—â–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –æ—Ç UserService
        } catch (Exception e) {
            logger.error("–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID {}: {}", id, e.getMessage(), e);
            return new ResponseEntity<>("–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}